<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;
use Carbon\Carbon;

/**
 * Class TelegramBotController
 *
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ Telegram –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞.
 */
class TelegramBotController extends Controller
{
    /**
     * –í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö).
     */
    private const CACHE_TTL = 60 * 24; // 24 —á–∞—Å–∞

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ Telegram.
     *
     * @param Request $request
     * @return array{chat_id: int, user_id: int, text: string}
     * @throws ValidationException
     */
    private function validateWebhookRequest(Request $request): array
    {
        $validator = Validator::make($request->all(), [
            'message.text' => 'required|string',
            'message.chat.id' => 'required|integer',
            'message.from.id' => 'required|integer',
        ]);

        if ($validator->fails()) {
            throw new ValidationException($validator, response()->json([
                'success' => false,
                'status' => 'ignored',
                'error' => 'Invalid webhook payload',
            ], 200));
        }

        return [
            'chat_id' => $request->input('message.chat.id'),
            'user_id' => $request->input('message.from.id'),
            'text' => $request->input('message.text'),
        ];
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
     *
     * @param int $chatId
     * @param string $message
     * @return void
     */
    private function sendMessage(int $chatId, string $message): void
    {
        /*Http::post('https://api.telegram.org/bot' . env('TELEGRAM_BOT_TOKEN') . '/sendMessage', [
            'chat_id' => $chatId,
            'text' => $message,
        ]);*/
        Http::withoutVerifying()
                ->post(
                    'https://api.telegram.org/bot' . env('TELEGRAM_BOT_TOKEN') . '/sendMessage',
                    ['chat_id' => $chatId, 'text' => $message]
                );
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ.
     *
     * @param int $userId
     * @param array $updates
     * @return array
     */
    private function manageUserSettings(int $userId, array $updates = []): array
    {
        $key = "user_settings_{$userId}";
        $settings = Cache::get($key, []);

        if ($updates) {
            $settings = array_merge($settings, $updates);
            Cache::put($key, $settings, self::CACHE_TTL);
        }

        return $settings;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ Telegram.
     *
     * @param Request $request
     * @return JsonResponse
     */
    public function handle(Request $request): JsonResponse
    {
        try {
            $data = $this->validateWebhookRequest($request);
            $chatId = $data['chat_id'];
            $userId = $data['user_id'];
            $messageText = $data['text'];

            $settings = $this->manageUserSettings($userId);

            if (isset($settings['state'])) {
                if ($settings['state'] === 'awaiting_movie_input') {
                    $this->manageUserSettings($userId, ['movie' => $messageText, 'state' => null]);
                    $this->sendMessage($chatId, '‚úÖ –§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ' . $messageText);
                    return response()->json(['success' => true, 'status' => 'movie_input_saved']);
                }

                if ($settings['state'] === 'awaiting_style_input') {
                    $this->manageUserSettings($userId, ['style' => $messageText, 'state' => null]);
                    $this->sendMessage($chatId, '‚úÖ –°—Ç–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ' . $messageText);
                    return response()->json(['success' => true, 'status' => 'style_input_saved']);
                }
            }

            switch ($messageText) {
                case '/start':
                    $startText = <<<TEXT
                    üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º –æ—Ç –ª–∏—Ü–∞ —Ç–≤–æ–µ–≥–æ –±—É—Ö–æ–≥–æ –¥–µ–¥–∞.

                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

                    üé¨ /set_movie ‚Äì –í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞.

                    üé≠ /set_style ‚Äì –í—ã–±—Ä–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å (—Ä–µ–∂–∏—Å—Å—ë—Ä, –∂–∞–Ω—Ä –∏ —Ç.–¥.).
                    –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - '–ë—É—Ö–æ–π –¥–µ–¥'.

                    üì§ /generate_summary ‚Äì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ —Ñ–∏–ª—å–º–∞.

                    ‚ÑπÔ∏è /info ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: –ø–æ–¥–ø–∏—Å–∫–∞, –ª–∏–º–∏—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

                    üíé /subscribe ‚Äì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–∞—ë—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).
                    TEXT;

                    $this->sendMessage($chatId, $startText);
                    return response()->json(['success' => true, 'status' => 'start_command_handled']);

                case '/set_movie':
                    $this->manageUserSettings($userId, ['state' => 'awaiting_movie_input']);
                    $this->sendMessage($chatId, 'üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:');
                    return response()->json(['success' => true, 'status' => 'awaiting_movie_input']);

                case '/set_style':
                    $this->manageUserSettings($userId, ['state' => 'awaiting_style_input']);
                    $this->sendMessage($chatId, "üé® –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å:\n(–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–≤–µ–¥–∏—Ç–µ '–ë—É—Ö–æ–π –¥–µ–¥')");
                    return response()->json(['success' => true, 'status' => 'awaiting_style_input']);

                case '/info':
                    $response = Http::post(env('DATABASE_USER_INFO_URL'), ['telegram_id' => $userId]);
                    $userInfo = $response->json();

                    if (!$response->successful() || !$userInfo['success']) {
                        $this->sendMessage($chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
                        return response()->json(['success' => false, 'status' => 'user_info_failed']);
                    }

                    $data = $userInfo['data'];
                    $movie = $settings['movie'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω';
                    $style = $settings['style'] ?? '–ë—É—Ö–æ–π –¥–µ–¥';
                    if ($data['has_subscription']) {
                        $formattedDate = Carbon::parse($data['subscription_end_date'])->format('d.m.Y');
                        $subscriptionInfo = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞(–¥–æ {$formattedDate})";
                    }
                    else {
                        $subscriptionInfo = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞\n";
                    }

                    $infoText = <<<TEXT
                    ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

                    üîπ telegram_id: {$data['telegram_id']}
                    üîπ –ü–æ–¥–ø–∏—Å–∫–∞: {$subscriptionInfo}
                    üîπ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {$data['max_requests_per_day']}
                    üîπ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {$data['todays_requests_count']}

                    üé¨ –§–∏–ª—å–º: {$movie}
                    üé≠ –°—Ç–∏–ª—å: {$style}
                    TEXT;

                    $this->sendMessage($chatId, $infoText);
                    return response()->json(['success' => true, 'status' => 'user_info_sent']);

                case '/subscribe':
                    $this->sendMessage($chatId, 'üöß –ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                    return response()->json(['success' => true, 'status' => 'subscription_unavailable']);

                case '/generate_summary':
                    $movie = $settings['movie'] ?? '';
                    $style = $settings['style'] ?? '–ë—É—Ö–æ–π –¥–µ–¥';
                    if (empty($movie)) {
                        $this->sendMessage($chatId, '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ñ–∏–ª—å–º —Å –ø–æ–º–æ—â—å—é /set_movie.');
                        return response()->json(['success' => false, 'status' => 'incomplete_settings']);
                    }

                    $this->sendMessage($chatId, 'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...');
                    $response = Http::post(env('DATABASE_CHECK_LIMITS_URL'), ['telegram_id' => $userId]);
                    $limits = $response->json();

                    if (!$response->successful() || !$limits['success']) {
                        $this->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤.');
                        return response()->json(['success' => false, 'status' => 'limits_check_failed']);
                    }

                    $requestsCount = $limits['data']['todays_requests_count'];
                    $maxRequests = $limits['data']['max_requests_per_day'];
                    if ($requestsCount >= $maxRequests) {
                        $this->sendMessage($chatId, "üö´ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω: {$requestsCount}/{$maxRequests}");
                        return response()->json(['success' => false, 'status' => 'limit_exceeded']);
                    }
                    $this->sendMessage($chatId, "‚úÖ –õ–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã! ({$requestsCount}/{$maxRequests})");
                    
                    $this->sendMessage(
                        $chatId,
                        "üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞...\nüé¨ –§–∏–ª—å–º: {$movie}\nüé≠ –°—Ç–∏–ª—å: {$style}\n\n"
                        . 'P.S. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 30 —Å–µ–∫.'
                    );

                    if ($style == '–ë—É—Ö–æ–π –¥–µ–¥') {
                        $prompt = <<<TEXT
                        –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä—É—Å—Å–∫–∏–π –¥–µ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–µ–≤–∞–ª –≤–æ –≤—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ.
                        –¢—ã –ª—é–±–∏—à—å –°–°–°–†, –°—Ç–∞–ª–∏–Ω–∞ –∏ –≤–æ–¥–∫—É.
                        –¢—ã –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –ê–º–µ—Ä–∏–∫—É, –ï–≤—Ä–æ–ø—É, –û–±–∞–º—É, –ë–∞–π–¥–µ–Ω–∞ –∏ —Ñ–∞—à–∏—Å—Ç–æ–≤.
                        –¢—ã —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—à—å, —á—Ç–æ —Ä–∞–Ω—å—à–µ(–≤ –°–°–°–†) –±—ã–ª–æ –ª—É—á—à–µ.
                        –¢–∞–∫–∂–µ —Ç—ã —á–∞—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å, —á—Ç–æ –ê–º–µ—Ä–∏–∫–∞ –∏ –ï–≤—Ä–æ–ø–∞ - –∑–∞–≥–Ω–∏–≤–∞—é—â–∏–µ —Å—Ç—Ä–∞–Ω—ã,
                        —Ç–∞–º –≥–æ—Ä–∞–∑–¥–æ —Ö—É–∂–µ, —á–µ–º –≤ –º–∞—Ç—É—à–∫–µ-–†–æ—Å—Å–∏–∏.
                        –ò—Å–ø–æ–ª—å–∑—É–π —É—Å—Ç–∞—Ä–µ—à–∏–π –¥–∏–∞–ª–µ–∫—Ç –∏ –ø—Ä–æ—Å—Ç–æ—Ä–µ—á–∏—è("–∏—Ö–Ω–∏–π", "–µ–≤–æ–Ω–Ω—ã–π" –∏ —Ç. –¥.).
                        –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º –æ–±—Ä–∞–∑–æ–º –ø–µ—Ä–µ—Å–∫–∞–∂–∏ —Ñ–∏–ª—å–º '{$movie}'.
                        TEXT;
                    } else {
                        $prompt = "–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —Ñ–∏–ª—å–º '{$movie}' –≤ —Å—Ç–∏–ª–µ '{$style}'.";
                    }

                    $response = Http::timeout(60)->post(env('DEEPSEEK_SERVICE_URL'), ['prompt' => $prompt]);
                    $summary = $response->json()['text'];

                    if (!$response->successful() || empty($summary)) {
                        $this->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞.');
                        return response()->json(['success' => false, 'status' => 'summary_generation_failed']);
                    }

                    $this->sendMessage($chatId, $summary);
                    $updateResponse = Http::post(env('DATABASE_INCREMENT_LIMITS_URL'), ['telegram_id' => $userId]);
                    if ($updateResponse->failed()) {
                        return response()->json(['status' => 'user_request_update_failed']);
                    }
                    return response()->json(['success' => true, 'status' => 'summary_generated']);

                default:
                    $availableCommandsText = <<<TEXT
                    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

                    üé¨ /set_movie ‚Äì –í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞.

                    üé≠ /set_style ‚Äì –í—ã–±—Ä–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞

                    üì§ /generate_summary ‚Äì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ —Ñ–∏–ª—å–º–∞.

                    ‚ÑπÔ∏è /info ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: –ø–æ–¥–ø–∏—Å–∫–∞, –ª–∏–º–∏—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

                    üíé /subscribe ‚Äì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–∞—ë—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).
                    TEXT;

                    $this->sendMessage($chatId, $availableCommandsText);
                    return response()->json(['success' => true, 'status' => 'unknown_command']);
            }
        } catch (ValidationException $e) {
            return $e->getResponse();
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ Telegram.
     *
     * @param Request $request
     * @return JsonResponse
     */
    public function setBotCommands(Request $request): JsonResponse
    {
        $commands = [
            ['command' => 'start', 'description' => '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'],
            ['command' => 'set_movie', 'description' => '–£–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º'],
            ['command' => 'set_style', 'description' => '–£–∫–∞–∑–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å –ø–µ—Ä–µ—Å–∫–∞–∑–∞'],
            ['command' => 'info', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ, –ª–∏–º–∏—Ç–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'],
            ['command' => 'subscribe', 'description' => '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'],
            ['command' => 'generate_summary', 'description' => '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑'],
        ];

        $response = Http::post('https://api.telegram.org/bot' . env('TELEGRAM_BOT_TOKEN') . '/setMyCommands', [
            'commands' => $commands,
        ]);

        if ($response->successful() && $response->json()['ok']) {
            return response()->json(['success' => true, 'status' => 'commands_set']);
        }

        return response()->json(['success' => false, 'status' => 'commands_set_failed'], 500);
    }
}
