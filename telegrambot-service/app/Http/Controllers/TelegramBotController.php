<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use Carbon\Carbon;



class TelegramBotController extends Controller {
    public function handle(Request $request) {
        $messageText = $request->input('message.text');
        $chatId = $request->input('message.chat.id');
        $telegramId = $request->input('message.from.id');

        if (!$messageText || !$chatId || !$telegramId) {
            return response()->json(['status' => 'ignored']);
        }

        $this->sendMessage($chatId, "Parsing request...");

        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $userKey = "user_settings_{$telegramId}";
        $settings = Cache::get($userKey, []);



        if (isset($settings['state'])) {
            if ($settings['state'] === 'awaiting_movie_input') {
                $settings['movie'] = $messageText;
                unset($settings['state']);
                Cache::put($userKey, $settings, now()->addMinutes(15));
                $this->sendMessage($chatId, "‚úÖ –§–∏–ª—å–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {$messageText}");
                return response()->json(['status' => 'movie_input_saved']);
            }

            elseif ($settings['state'] === 'awaiting_style_input') {
                $settings['style'] = $messageText;
                unset($settings['state']);
                Cache::put($userKey, $settings, now()->addMinutes(15));
                $this->sendMessage($chatId, "‚úÖ –°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {$messageText}");
                return response()->json(['status' => 'style_input_saved']);
            }

            else {
                unset($settings['state']);
                return response()->json(['status' => 'invalid_state']);
            }
        }



        elseif ($messageText === '/start') {
            $startText = <<<TEXT
            üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–±–æ–π —Å—Ç–∏–ª–µ.

            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

            üé¨ /set_movie ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞.

            üé≠ /set_style ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å (—Ä–µ–∂–∏—Å—Å—ë—Ä, –∂–∞–Ω—Ä –∏ —Ç.–¥.).

            üì§ /summary ‚Äì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑.

            ‚ÑπÔ∏è /info ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: –ø–æ–¥–ø–∏—Å–∫–∞, –ª–∏–º–∏—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

            üîÑ /reset_limits ‚Äì –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (0).

            üíé /subscribe ‚Äì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–∞—ë—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).
            TEXT;

            $this->sendMessage($chatId, $startText);
            return response()->json(['status' => 'start_command_handled']);
        }



        elseif ($messageText === '/info') {
            // database-service getUserInfo
            $this->sendMessage($chatId, '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
            $infoResponse = Http::withoutVerifying()->timeout(60)->post(env('DATABASE_INFO_URL'), [
                'telegram_id' => $telegramId,
            ]);

            if ($infoResponse->failed()) {
                $this->sendMessage($chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.');
                return response()->json(['status' => 'user_info_fetch_failed']);
            }

            $userInfo = $infoResponse->json();
            $movie = $settings['movie'] ?? '';
            $style = $settings['style'] ?? '';

            $subscriptionStatus = $userInfo['has_subscription'] ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ –ê–∫—Ç–∏–≤–Ω–∞';
            $maxRequests = $userInfo['max_requests_per_day'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            $infoText = <<<TEXT
            ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

            üîπ telegram_id: {$telegramId}
            üîπ –ü–æ–¥–ø–∏—Å–∫–∞: {$subscriptionStatus}
            TEXT;

            if ($userInfo['has_subscription']) {
                $formattedDate = Carbon::parse($userInfo['subscription_end_date'])->format('d.m.Y');
                $infoText .= " (–¥–æ {$formattedDate})\n";
            }

            $infoText .= <<<TEXT
            üîπ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {$maxRequests}
            üîπ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {$userInfo['todays_requests_count']}

            üé¨ –§–∏–ª—å–º: {$movie}
            üé≠ –°—Ç–∏–ª—å: {$style}
            TEXT;

            $this->sendMessage($chatId, $infoText);
            return response()->json(['status' => 'user_info_sent']);
        }



        elseif ($messageText === '/reset_limits') {
            $this->sendMessage($chatId, '–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤...');

            $resetResponse = Http::withoutVerifying()->timeout(60)->post(env('DATABASE_RESET_LIMITS_URL'), [
                'telegram_id' => $telegramId,
            ]);

            if ($resetResponse->failed()) {
                $this->sendMessage($chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã.');
                return response()->json(['status' => 'limits_reset_failed']);
            }

            $this->sendMessage($chatId, '–õ–∏–º–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!');
            return response()->json(['status' => 'limits_reset_success']);
        }



        elseif ($messageText === '/subscribe') {
            $this->sendMessage($chatId, '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...');

            $subscribeResponse = Http::withoutVerifying()->timeout(60)->post(env('DATABASE_SUBSCRIBE_URL'), [
                'telegram_id' => $telegramId,
            ]);

            if ($subscribeResponse->failed()) {
                $this->sendMessage($chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return response()->json(['status' => 'subscription_failed']);
            }

            $this->sendMessage($chatId, '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞ 1 –º–µ—Å—è—Ü! –°–ø–∞—Å–∏–±–æ ü•≥');
            return response()->json(['status' => 'subscription_success']);
        }



        elseif ($messageText === '/set_movie') {
            $this->sendMessage($chatId, "üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:");
            $settings['state'] = 'awaiting_movie_input';
            Cache::put($userKey, $settings, now()->addMinutes(15));
            return response()->json(['status' => 'awaiting_movie_input']);
        } 



        elseif ($messageText === '/set_style') {
            $this->sendMessage($chatId, "üé® –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å:");
            $settings['state'] = 'awaiting_style_input';
            Cache::put($userKey, $settings, now()->addMinutes(15));
            return response()->json(['status' => 'awaiting_style_input']);
        } 



        elseif ($messageText === '/summary') {
            $movie = $settings['movie'] ?? '';
            $style = $settings['style'] ?? '';
            if (empty($movie) || empty($style)) {
                $this->sendMessage($chatId, "–£–∫–∞–∂–∏ —Ñ–∏–ª—å–º –∏ —Å—Ç–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_movie –∏ /set_style.");
                return response()->json(['status' => 'incomplete_settings']);
            }

            // database-service checkLimit
            $this->sendMessage($chatId, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...');
            $limitResponse = Http::withoutVerifying()->timeout(60)->post(env('DATABASE_SERVICE_URL'), [
                'telegram_id' => $telegramId,
            ]);

            if ($limitResponse->failed()) {
                $this->sendMessage($chatId, '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤.');
                return response()->json(['status' => 'user_limits_fetch_failed']);
            }

            if (!$limitResponse->json('allowed')) {
                $this->sendMessage($chatId, '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å!');
                return response()->json(['status' => 'limited']);
            }
            $this->sendMessage($chatId, '–õ–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã!');

            // DEEPSEEK SERVICE
            $this->sendMessage($chatId, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...\nüé¨ –§–∏–ª—å–º: {$movie}\nüé≠ –°—Ç–∏–ª—å: {$style}");
            $prompt = "–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —Ñ–∏–ª—å–º {$movie} –≤ —Å—Ç–∏–ª–µ {$style}.";
            $generationResponse = Http::withoutVerifying()->timeout(180)->post(env('DEEPSEEK_SERVICE_URL'), [
                'prompt' => $prompt,
            ]);

            if ($generationResponse->failed()) {
                $this->sendMessage($chatId, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return response()->json(['status' => 'text_generation_failed']);
            }

            $generatedText = $generationResponse->json('text') ?? '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.';
            $this->sendMessage($chatId, $generatedText);
            return response()->json(['status' => 'summary_generated']);
        } 



        else {
            $availableCommandsText = <<<TEXT
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

            üé¨ /set_movie ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞.

            üé≠ /set_style ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å (—Ä–µ–∂–∏—Å—Å—ë—Ä, –∂–∞–Ω—Ä –∏ —Ç.–¥.).

            üì§ /summary ‚Äì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑.

            ‚ÑπÔ∏è /info ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: –ø–æ–¥–ø–∏—Å–∫–∞, –ª–∏–º–∏—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

            üîÑ /reset_limits ‚Äì –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (0).

            üíé /subscribe ‚Äì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–∞—ë—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).
            TEXT;

            $this->sendMessage($chatId, $availableCommandsText);
            return response()->json(['status' => 'unknown_command']);
        }
    }



    private function sendMessage($chatId, $text) {
        try {
            Http::withoutVerifying()->timeout(60)->post(
                "https://api.telegram.org/bot" . env('TELEGRAM_BOT_TOKEN') . "/sendMessage",
                ['chat_id' => $chatId, 'text' => $text]
            );
        } 
        catch (\Exception $e) {
            \Log::error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: " . $e->getMessage());
        }
    }
}
