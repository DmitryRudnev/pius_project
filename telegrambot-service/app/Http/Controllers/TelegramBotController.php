<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use Illuminate\Http\JsonResponse;
use Carbon\Carbon;

class TelegramBotController extends Controller
{
    public function handle(Request $request): JsonResponse
    {
        $messageText = $request->input('message.text');
        $chatId = $request->input('message.chat.id');
        $telegramId = $request->input('message.from.id');

        if (!$messageText || !$chatId || !$telegramId) {
            return response()->json(['status' => 'ignored']);
        }

        $userKey = "user_settings_{$telegramId}";
        $settings = Cache::get($userKey, []);

        if (isset($settings['state'])) {
            if ($settings['state'] === 'awaiting_movie_input') {
                $settings['movie'] = $messageText;
                unset($settings['state']);
                Cache::put($userKey, $settings, now()->addMinutes(15));
                $this->sendMessage($chatId, "‚úÖ –§–∏–ª—å–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {$messageText}");
                return response()->json(['status' => 'movie_input_saved']);
            } elseif ($settings['state'] === 'awaiting_style_input') {
                $settings['style'] = $messageText;
                unset($settings['state']);
                Cache::put($userKey, $settings, now()->addMinutes(15));
                $this->sendMessage($chatId, "‚úÖ –°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {$messageText}");
                return response()->json(['status' => 'style_input_saved']);
            } else {
                unset($settings['state']);
                return response()->json(['status' => 'invalid_state']);
            }
        } elseif ($messageText === '/start') {
            $startText = <<<TEXT
            üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º –æ—Ç –ª–∏—Ü–∞ —Ç–≤–æ–µ–≥–æ –±—É—Ö–æ–≥–æ –¥–µ–¥–∞.

            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

            üé¨ /set_movie ‚Äì –í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞.

            üé≠ /set_style ‚Äì –í—ã–±—Ä–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å (—Ä–µ–∂–∏—Å—Å—ë—Ä, –∂–∞–Ω—Ä –∏ —Ç.–¥.).
            –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - '–ë—É—Ö–æ–π –¥–µ–¥'.

            üì§ /generate_summary ‚Äì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ —Ñ–∏–ª—å–º–∞.

            ‚ÑπÔ∏è /info ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: –ø–æ–¥–ø–∏—Å–∫–∞, –ª–∏–º–∏—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

            üíé /subscribe ‚Äì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–∞—ë—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).
            TEXT;

            $this->sendMessage($chatId, $startText);
            return response()->json(['status' => 'start_command_handled']);
        } elseif ($messageText === '/info') {
            $infoResponse = Http::withoutVerifying()
                ->timeout(60)
                ->post(env('DATABASE_USER_INFO_URL'), [
                    'telegram_id' => $telegramId,
                ]);

            if ($infoResponse->failed()) {
                $this->sendMessage($chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.');
                return response()->json(['status' => 'user_info_fetch_failed']);
            }

            $userInfo = $infoResponse->json();
            $movie = $settings['movie'] ?? '-';
            $style = $settings['style'] ?? '–ë—É—Ö–æ–π –¥–µ–¥';

            $subscriptionStatus = $userInfo['has_subscription']
                ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞'
                : '‚ùå –ù–µ –ê–∫—Ç–∏–≤–Ω–∞';
            $maxRequests = $userInfo['max_requests_per_day'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            $infoText = <<<TEXT
            ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

            üîπ telegram_id: {$telegramId}
            üîπ –ü–æ–¥–ø–∏—Å–∫–∞: {$subscriptionStatus}
            TEXT;

            if ($userInfo['has_subscription']) {
                $formattedDate = Carbon::parse($userInfo['subscription_end_date'])
                    ->format('d.m.Y');
                $infoText .= " (–¥–æ {$formattedDate})";
            }

            $infoText .= <<<TEXT

            üîπ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {$maxRequests}
            üîπ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {$userInfo['todays_requests_count']}

            üé¨ –§–∏–ª—å–º: {$movie}
            üé≠ –°—Ç–∏–ª—å: {$style}
            TEXT;

            $this->sendMessage($chatId, $infoText);
            return response()->json(['status' => 'user_info_sent']);
        } elseif ($messageText === '/subscribe') {
            $this->sendMessage($chatId, 'üöß –ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return response()->json(['status' => 'subscription_success']);
        } elseif ($messageText === '/set_movie') {
            $this->sendMessage($chatId, "üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:");
            $settings['state'] = 'awaiting_movie_input';
            Cache::put($userKey, $settings, now()->addMinutes(15));
            return response()->json(['status' => 'awaiting_movie_input']);
        } elseif ($messageText === '/set_style') {
            $this->sendMessage(
                $chatId,
                "üé® –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∏–ª—å:\n(–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–≤–µ–¥–∏—Ç–µ '–ë—É—Ö–æ–π –¥–µ–¥')"
            );
            $settings['state'] = 'awaiting_style_input';
            Cache::put($userKey, $settings, now()->addMinutes(15));
            return response()->json(['status' => 'awaiting_style_input']);
        } elseif ($messageText === '/generate_summary') {
            $movie = $settings['movie'] ?? '';
            $style = $settings['style'] ?? '–ë—É—Ö–æ–π –¥–µ–¥';
            if (empty($movie)) {
                $this->sendMessage($chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ñ–∏–ª—å–º —Å –ø–æ–º–æ—â—å—é /set_movie.");
                return response()->json(['status' => 'incomplete_settings']);
            }

            $this->sendMessage($chatId, 'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...');
            $limitResponse = Http::withoutVerifying()
                ->timeout(60)
                ->post(env('DATABASE_CHECK_LIMITS_URL'), [
                    'telegram_id' => $telegramId,
                ]);

            if ($limitResponse->failed()) {
                $this->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤.');
                return response()->json(['status' => 'user_limits_fetch_failed']);
            }

            $requestsCount = $limitResponse->json('todays_requests_count');
            $maxRequests = $limitResponse->json('max_requests_per_day');

            if ($requestsCount >= $maxRequests) {
                $this->sendMessage(
                    $chatId,
                    "üö´ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å! ({$requestsCount}/{$maxRequests})"
                );
                return response()->json(['status' => 'limited']);
            }

            $this->sendMessage(
                $chatId,
                "‚úÖ –õ–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã! ({$requestsCount}/{$maxRequests})"
            );

            $this->sendMessage(
                $chatId,
                "üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞...\nüé¨ –§–∏–ª—å–º: {$movie}\nüé≠ –°—Ç–∏–ª—å: {$style}\n\n"
                . "P.S. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 30 —Å–µ–∫."
            );

            if ($style == '–ë—É—Ö–æ–π –¥–µ–¥') {
                $prompt = <<<TEXT
                –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä—É—Å—Å–∫–∏–π –¥–µ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–µ–≤–∞–ª –≤–æ –≤—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ.
                –¢—ã –ª—é–±–∏—à—å –°–°–°–†, –°—Ç–∞–ª–∏–Ω–∞ –∏ –≤–æ–¥–∫—É.
                –¢—ã –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –ê–º–µ—Ä–∏–∫—É, –ï–≤—Ä–æ–ø—É, –û–±–∞–º—É, –ë–∞–π–¥–µ–Ω–∞ –∏ —Ñ–∞—à–∏—Å—Ç–æ–≤.
                –¢—ã —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—à—å, —á—Ç–æ —Ä–∞–Ω—å—à–µ(–≤ –°–°–°–†) –±—ã–ª–æ –ª—É—á—à–µ.
                –¢–∞–∫–∂–µ —Ç—ã —á–∞—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å, —á—Ç–æ –ê–º–µ—Ä–∏–∫–∞ –∏ –ï–≤—Ä–æ–ø–∞ - –∑–∞–≥–Ω–∏–≤–∞—é—â–∏–µ —Å—Ç—Ä–∞–Ω—ã,
                —Ç–∞–º –≥–æ—Ä–∞–∑–¥–æ —Ö—É–∂–µ, —á–µ–º –≤ –º–∞—Ç—É—à–∫–µ-–†–æ—Å—Å–∏–∏.
                –ò—Å–ø–æ–ª—å–∑—É–π —É—Å—Ç–∞—Ä–µ—à–∏–π –¥–∏–∞–ª–µ–∫—Ç –∏ –ø—Ä–æ—Å—Ç–æ—Ä–µ—á–∏—è("–∏—Ö–Ω–∏–π", "–µ–≤–æ–Ω–Ω—ã–π" –∏ —Ç. –¥.).
                –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º –æ–±—Ä–∞–∑–æ–º –ø–µ—Ä–µ—Å–∫–∞–∂–∏ —Ñ–∏–ª—å–º '{$movie}'.
                TEXT;
            } else {
                $prompt = "–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —Ñ–∏–ª—å–º '{$movie}' –≤ —Å—Ç–∏–ª–µ '{$style}'.";
            }

            $generationResponse = Http::withoutVerifying()
                ->timeout(180)
                ->post(env('DEEPSEEK_SERVICE_URL'), [
                    'prompt' => $prompt,
                ]);

            if ($generationResponse->failed()) {
                $this->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return response()->json(['status' => 'text_generation_failed']);
            }

            $generatedText = $generationResponse->json('text');
            if (empty($generatedText)) {
                $this->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return response()->json(['status' => 'text_generation_failed']);
            }

            $this->sendMessage($chatId, $generatedText);

            $updateResponse = Http::withoutVerifying()
                ->timeout(60)
                ->post(env('DATABASE_INCREMENT_LIMITS_URL'), [
                    'telegram_id' => $telegramId,
                ]);

            if ($updateResponse->failed()) {
                $this->sendMessage($chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.');
                return response()->json(['status' => 'user_request_update_failed']);
            }

            return response()->json(['status' => 'summary_generated']);
        } else {
            $availableCommandsText = <<<TEXT
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

            üé¨ /set_movie ‚Äì –í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞.

            üé≠ /set_style ‚Äì –í—ã–±—Ä–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞

            üì§ /generate_summary ‚Äì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ —Ñ–∏–ª—å–º–∞.

            ‚ÑπÔ∏è /info ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: –ø–æ–¥–ø–∏—Å–∫–∞, –ª–∏–º–∏—Ç—ã –∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

            üíé /subscribe ‚Äì –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–∞—ë—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å).
            TEXT;

            $this->sendMessage($chatId, $availableCommandsText);
            return response()->json(['status' => 'unknown_command']);
        }
    }

    private function sendMessage(int $chatId, string $text): void
    {
        try {
            Http::withoutVerifying()
                ->timeout(60)
                ->post(
                    "https://api.telegram.org/bot" . env('TELEGRAM_BOT_TOKEN') . "/sendMessage",
                    ['chat_id' => $chatId, 'text' => $text]
                );
        } catch (\Exception $e) {
            \Log::error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: " . $e->getMessage());
        }
    }

    public function setBotCommands(): JsonResponse
    {
        $commands = [
            [
                'command' => 'start',
                'description' => '–í—ã–≤–µ—Å—Ç–∏ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ',
            ],
            [
                'command' => 'set_movie',
                'description' => '–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞',
            ],
            [
                'command' => 'set_style',
                'description' => '–í—ã–±—Ä–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞',
            ],
            [
                'command' => 'generate_summary',
                'description' => '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ —Ñ–∏–ª—å–º–∞',
            ],
            [
                'command' => 'info',
                'description' => '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ, –ª–∏–º–∏—Ç–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
            ],
            [
                'command' => 'subscribe',
                'description' => '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤',
            ],
        ];

        try {
            $response = Http::withoutVerifying()
                ->timeout(60)
                ->post(
                    "https://api.telegram.org/bot" . env('TELEGRAM_BOT_TOKEN') . "/setMyCommands",
                    [
                        'commands' => json_encode($commands),
                        'scope' => json_encode(['type' => 'all_private_chats']),
                        'language_code' => 'ru',
                    ]
                );

            if ($response->successful()) {
                \Log::info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
                return response()->json(['status' => 'commands_set']);
            } else {
                \Log::error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: " . $response->body());
                return response()->json(['status' => 'commands_set_failed'], 500);
            }
        } catch (\Exception $e) {
            \Log::error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: " . $e->getMessage());
            return response()->json(['status' => 'commands_set_exception'], 500);
        }
    }
}
